{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to STM32MP1 Wiki Overview This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!) Introduction The STM32MP157C-DK2 Discovery kits leverage the capabilities of STM32MP1 Series microprocessors to allow users easily develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor. They include: STM32MP157 Arm\u00ae-based dual Cortex\u00ae-A7 32 bits + Cortex\u00ae-M4 32 bits MPU in TFBGA361 package ST PMIC STPMIC1 4-Gbit DDR3L, 16 bits, 533 MHz 1-Gbps Ethernet (RGMII) compliant with IEEE-802.3ab USB OTG HS Audio codec 4 user LEDs 2 user and reset push-buttons, 1 wake-up button 5 V / 3 A USB Type-CTM power supply input Board connectors:Ethernet RJ454 \u00d7 USB Host Type-AUSB Type-CTM DRPMIPI DSISMHDMI\u00aeStereo headset jack including analog microphone inputmicroSDTM cardGPIO expansion connector (Raspberry Pi\u00ae shields capability)ARDUINO\u00ae Uno V3 expansion connectors On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: Virtual COM port and debug port STM32CubeMP1 and full mainline open-source Linux\u00ae STM32 MPU OpenSTLinux Distribution (such as STM32MP1Starter) software and examples 4\" TFT 480\u00d7800 pixels with LED backlight, MIPI DSISM interface, and capacitive touch panel Wi-Fi\u00ae 802.11b/g/n Bluetooth Low Energy 4.1","title":"Home"},{"location":"#welcome-to-stm32mp1-wiki","text":"","title":"Welcome to STM32MP1 Wiki"},{"location":"#overview","text":"This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"Overview"},{"location":"#introduction","text":"The STM32MP157C-DK2 Discovery kits leverage the capabilities of STM32MP1 Series microprocessors to allow users easily develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor. They include: STM32MP157 Arm\u00ae-based dual Cortex\u00ae-A7 32 bits + Cortex\u00ae-M4 32 bits MPU in TFBGA361 package ST PMIC STPMIC1 4-Gbit DDR3L, 16 bits, 533 MHz 1-Gbps Ethernet (RGMII) compliant with IEEE-802.3ab USB OTG HS Audio codec 4 user LEDs 2 user and reset push-buttons, 1 wake-up button 5 V / 3 A USB Type-CTM power supply input Board connectors:Ethernet RJ454 \u00d7 USB Host Type-AUSB Type-CTM DRPMIPI DSISMHDMI\u00aeStereo headset jack including analog microphone inputmicroSDTM cardGPIO expansion connector (Raspberry Pi\u00ae shields capability)ARDUINO\u00ae Uno V3 expansion connectors On-board ST-LINK/V2-1 debugger/programmer with USB re-enumeration capability: Virtual COM port and debug port STM32CubeMP1 and full mainline open-source Linux\u00ae STM32 MPU OpenSTLinux Distribution (such as STM32MP1Starter) software and examples 4\" TFT 480\u00d7800 pixels with LED backlight, MIPI DSISM interface, and capacitive touch panel Wi-Fi\u00ae 802.11b/g/n Bluetooth Low Energy 4.1","title":"Introduction"},{"location":"about/","text":"About Me! Hey there! My name is Deepak Reddy and I maintain this documentation. I hold an undergraduate degree in Electrical and Electronics Engineering and I worked as a Hardware Design Engineer for 4 years in a startup. Recently I came accross the ST's line of Microprocessors and I felt it fascinating. I personally felt this is one of the best Microprocessor out there in the market as it is the combination of a MPU and MCU. This combination has many use cases and I felt I should try this out. So I bought STM32MP157C-DK2 development board and started experimenting. This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"About"},{"location":"about/#about-me","text":"Hey there! My name is Deepak Reddy and I maintain this documentation. I hold an undergraduate degree in Electrical and Electronics Engineering and I worked as a Hardware Design Engineer for 4 years in a startup. Recently I came accross the ST's line of Microprocessors and I felt it fascinating. I personally felt this is one of the best Microprocessor out there in the market as it is the combination of a MPU and MCU. This combination has many use cases and I felt I should try this out. So I bought STM32MP157C-DK2 development board and started experimenting. This documentation is based on my personal learnings working with STM32MP157C-DK2 development board by STMicroelectronics. This documentation will be updated from time to time based on new learnings. This Wiki is designed to consolidate my knowledge into a one stop source for future refereces. That said, this Wiki is: Not exhaustive. Constantly being updated with new information. May contain some errors (will be corrected if found!)","title":"About Me!"},{"location":"board_details/","text":"Introduction The STM32MP157C-DK2 Discovery kits are designed as complete demonstration and development platforms for STMicroelectronics Arm\u00ae-based dual Cortex\u00ae-A7 32 bits and Cortex\u00ae-M4 32 bits MPUs in the STM32MP1 Series. They leverage the capabilities of STM32MP1 Series microprocessors to allow users develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor. Hardware Layout and Configuration Block Diagram PCB layout Top Side PCB layout Bottom Side Clock Sources LSE clock references The LSE clock references on the STM32MP157x microprocessor are provided by the external crystal X2:32.768 kHz crystal. HSE clock references The HSE clock references on the STM32MP157x microprocessor are provided by the external crystal X6: 24 MHz crystal. Reset Sources The reset signal of STM32MP157C-DK2 is active low. The internal PU forces the RST signal to a high level. The sources of reset are: Reset button B2 (black button) STPMIC1 Embedded ST-LINK/V2.1 Arduino\u2122 connector CN16: pin 3, reset from the Arduino\u2122 board STM32MP157x Boot Modes At startup, the boot source used by the internal bootROM is selected by the Boot pins. Below table describes the configurations of the Boot pins. LEDs The LD2 LED turns green when the power cable is inserted in connector CN6. Two general-purpose color LEDs (LD7 and LD8) are available as light indicators The LD7 orange LED is used as STM32Cube examples verdict LED. The LD8 blue LED is used as Linux\u00ae Heartbeat LED, which is blinking as long as Linux\u00ae is alive on the Cortex\u00ae-A. The two user LEDs, the green LD5 and orange LD6 LEDs, are directly connected to the STM32MP157x Operating voltage - All LEDs are driven by the I/O level; they are operating in the 3.3 V voltage range. I/O Configuration of LEDS Buttons The STM32MP157C-DK2 Discovery kits provide four types of buttons: Wake-up button ( B1 ) Allows the platform to be woken up from any low-power mode Connected to STPMIC1 PONKEY, which generates a wake up signal on STM32MP157x PA0 Reset button ( B2 ) Used to reset the Discovery kit USER1 button ( B3 ) Used at boot time by U-Boot to enter the USB programming mode USER2 button ( B4 ) Used at boot time by U-Boot to enter the Android\u00ae Fastboot mode I/O Configuration of BUTTONS Arduino\u2122 connectors The Arduino\u2122 Uno V3 connectors (CN13, CN14, CN16, and CN17) are available on the STM32MP157C-DK2 Discovery kits. The Arduino\u2122 Uno V3 connectors support 5 V, 3.3 V, and VDD for I/O compatibility. Warning Do not supply 3.3 V or 5 V from the Arduino\u2122 shield. Supplying 3.3 V or 5 V from the Arduino\u2122 shield could damage the Discovery kit. I/O Configuration of Arduino Interface Arduino Pinout Interface GPIO Expansion Connectors STM32MP157C-DK2 I/O assignment","title":"Board Specific Details"},{"location":"board_details/#introduction","text":"The STM32MP157C-DK2 Discovery kits are designed as complete demonstration and development platforms for STMicroelectronics Arm\u00ae-based dual Cortex\u00ae-A7 32 bits and Cortex\u00ae-M4 32 bits MPUs in the STM32MP1 Series. They leverage the capabilities of STM32MP1 Series microprocessors to allow users develop applications using STM32 MPU OpenSTLinux Distribution software for the main processor and STM32CubeMP1 software for the co-processor.","title":"Introduction"},{"location":"board_details/#hardware-layout-and-configuration","text":"","title":"Hardware Layout and Configuration"},{"location":"board_details/#block-diagram","text":"","title":"Block Diagram"},{"location":"board_details/#pcb-layout-top-side","text":"","title":"PCB layout Top Side"},{"location":"board_details/#pcb-layout-bottom-side","text":"","title":"PCB layout Bottom Side"},{"location":"board_details/#clock-sources","text":"LSE clock references The LSE clock references on the STM32MP157x microprocessor are provided by the external crystal X2:32.768 kHz crystal. HSE clock references The HSE clock references on the STM32MP157x microprocessor are provided by the external crystal X6: 24 MHz crystal.","title":"Clock Sources"},{"location":"board_details/#reset-sources","text":"The reset signal of STM32MP157C-DK2 is active low. The internal PU forces the RST signal to a high level. The sources of reset are: Reset button B2 (black button) STPMIC1 Embedded ST-LINK/V2.1 Arduino\u2122 connector CN16: pin 3, reset from the Arduino\u2122 board STM32MP157x","title":"Reset Sources"},{"location":"board_details/#boot-modes","text":"At startup, the boot source used by the internal bootROM is selected by the Boot pins. Below table describes the configurations of the Boot pins.","title":"Boot Modes"},{"location":"board_details/#leds","text":"The LD2 LED turns green when the power cable is inserted in connector CN6. Two general-purpose color LEDs (LD7 and LD8) are available as light indicators The LD7 orange LED is used as STM32Cube examples verdict LED. The LD8 blue LED is used as Linux\u00ae Heartbeat LED, which is blinking as long as Linux\u00ae is alive on the Cortex\u00ae-A. The two user LEDs, the green LD5 and orange LD6 LEDs, are directly connected to the STM32MP157x Operating voltage - All LEDs are driven by the I/O level; they are operating in the 3.3 V voltage range. I/O Configuration of LEDS","title":"LEDs"},{"location":"board_details/#buttons","text":"The STM32MP157C-DK2 Discovery kits provide four types of buttons: Wake-up button ( B1 ) Allows the platform to be woken up from any low-power mode Connected to STPMIC1 PONKEY, which generates a wake up signal on STM32MP157x PA0 Reset button ( B2 ) Used to reset the Discovery kit USER1 button ( B3 ) Used at boot time by U-Boot to enter the USB programming mode USER2 button ( B4 ) Used at boot time by U-Boot to enter the Android\u00ae Fastboot mode I/O Configuration of BUTTONS","title":"Buttons"},{"location":"board_details/#arduinotm-connectors","text":"The Arduino\u2122 Uno V3 connectors (CN13, CN14, CN16, and CN17) are available on the STM32MP157C-DK2 Discovery kits. The Arduino\u2122 Uno V3 connectors support 5 V, 3.3 V, and VDD for I/O compatibility. Warning Do not supply 3.3 V or 5 V from the Arduino\u2122 shield. Supplying 3.3 V or 5 V from the Arduino\u2122 shield could damage the Discovery kit. I/O Configuration of Arduino Interface Arduino Pinout Interface","title":"Arduino\u2122 connectors"},{"location":"board_details/#gpio-expansion-connectors","text":"","title":"GPIO Expansion Connectors"},{"location":"board_details/#stm32mp157c-dk2-io-assignment","text":"","title":"STM32MP157C-DK2 I/O assignment"},{"location":"develop_cortexm4/","text":"Develop on Arm\u00ae Cortex\u00ae-M4","title":"Develop on Cortex-M4"},{"location":"develop_cortexm4/#develop-on-arm-cortex-m4","text":"","title":"Develop on Arm\u00ae Cortex\u00ae-M4"},{"location":"getting_started/","text":"Getting started with STM32MP157CDK-2 Required Equipment The following table lists the required equipment to start playing with your STM32MP157C-DK2 board. Connection Connect the micro USB Type-B to USB Type-A cable between your laptop and the ST-LINK/V2-1 port of the board Connect the USB Type-C\u2122 to USB Type-C\u2122 cable to the 5V/3A power supply Connect the USB Type-C\u2122 to USB Type-A cable betweenn your laptop and the USB Type-C\u2122 OTG port of the board Optionally connect the Ethernet cable between your Ethernet network and the Ethernet port of the board If the board power supply doesn't supply enough current (3A), the red LED indicates the issue following the rules below: Execute Basic Commands This stage explains how to connect the Linux\u00ae terminal of your board to your host computer through the ST-LINK/V2-1. Then you will see how to execute basic commands with the Linux command line interface in order to be familiarized with the Linux console. The Serial Terminal The serial terminal allows to communicate with the board trough a UART serial interface. On Mac/Linux install minicom by running the following commands respectively $ sudo apt-get install minicom for Linux. $ brew install minicom for Mac. For Mac - Get the port on which the device is connected by running the following command $ ls /dev/tty* and in my case the port is /dev/tty.usbmodem142202 For Linux - Get the port on which the device is connected by running the following command $ ls /dev/ttyACM* and you should get the following output /dev/ttyACM0 Tip Run the command again by disconnecting the dev board from the host computer and notice which port is not listed. The missing port ID is your desired port ID. Connect minicom to the minicom -D /dev/ttyACM0 device by running the following command: for Mac minicom -D /dev/tty.usbmodem142202 and for Linux minicom -D /dev/ttyACM0 The output screen will be as follows: $ minicom -D /dev/ttyACM0 Welcome to minicom 2.7.1 OPTIONS: I18n Compiled on Nov 15 2018, 20:18:47. Port /dev/ttyACM0, 15:56:03 Press CTRL-A Z for help on special keys Press the reset button to reset the board. You should see boot log displayed in the minicom window in your host computer. Connect using SSH This feature works only if the ethernet cable is connected to the board. Determine the board's IP Address by running the following command in board using the serial terminal $ ip addr show eth0 The following code is displayed in your serial terminal. 3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff inet xx.xx.xx.xx/xx brd xx.xx.xx.xx scope global dynamic eth0 valid_lft 159045sec preferred_lft 159045sec inet6 xxxx::xx:xx:xx:xx/64 scope link valid_lft forever preferred_lft forever inet xx.xx.xx.xx/xx is your board's IP address. On the host computer connect the terminal to the board using ssh $ ssh root@xx.xx.xx.xx root@stm32mp1:~# Basic Commands Printing distribution specific information $ cat /etc/build ----------------------- Build Configuration: | ----------------------- BB_VERSION = 1.46.0 BUILD_SYS = x86_64-linux NATIVELSBSTRING = universal TARGET_SYS = arm-ostl-linux-gnueabi MACHINE = stm32mp1 DISTRO = openstlinux-weston DISTRO_VERSION = 3.1-openstlinux-5.10-dunfell-mp1-21-03-31 TUNE_FEATURES = arm vfp cortexa7 neon vfpv4 thumb callconvention-hard TARGET_FPU = hard MANIFESTVERSION = ostl-21-03-31-rc4-2-g7ef7d27 DISTRO_CODENAME = dunfell ACCEPT_EULA_stm32mp1 = 1 GCCVERSION = 9.% PREFERRED_PROVIDER_virtual/kernel = linux-stm32mp PREFERRED_VERSION_linux-stm32mp = ----------------------- Layer Revisions: | ----------------------- meta-python = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-oe = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-gnome = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-initramfs = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-multimedia = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-networking = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-webserver = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-filesystems = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-perl = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-st-stm32mp = default.xml:2e80e33539a193c6a8add6131c4c760009c49cea meta-qt5 = default.xml:0d8eb956015acdea7e77cd6672d08dce18061510 meta-st-openstlinux = default.xml:673d7ee4572e3faadec3e43d5f0fa004465b78d9 meta = default.xml:72431ee8de5e3a53d259cebf420a7713ac9e1f14 Printing System Information $ uname -a Linux stm32mp1 5.10.10 #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 armv7l armv7l armv7l GNU/Linux Printing Linux Kernal and GCC versions $ cat /proc/version Linux version 5.10.10 (oe-user@oe-host) (arm-ostl-linux-gnueabi-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 Printing the amount of disk space available on all mounted file systems $ df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 147M 0 147M 0% /dev /dev/mmcblk0p6 690M 424M 220M 66% / tmpfs 214M 64K 214M 1% /dev/shm tmpfs 214M 8.8M 205M 5% /run tmpfs 214M 0 214M 0% /sys/fs/cgroup tmpfs 214M 20K 214M 1% /tmp /dev/mmcblk0p4 58M 14M 40M 27% /boot /dev/mmcblk0p5 15M 6.8M 6.7M 51% /vendor tmpfs 214M 144K 214M 1% /var/volatile /dev/mmcblk0p7 28G 38M 26G 1% /usr/local tmpfs 43M 0 43M 0% /run/user/0","title":"Setting up STM32MP157C-DK2"},{"location":"getting_started/#getting-started-with-stm32mp157cdk-2","text":"","title":"Getting started with STM32MP157CDK-2"},{"location":"getting_started/#required-equipment","text":"The following table lists the required equipment to start playing with your STM32MP157C-DK2 board.","title":"Required Equipment"},{"location":"getting_started/#connection","text":"Connect the micro USB Type-B to USB Type-A cable between your laptop and the ST-LINK/V2-1 port of the board Connect the USB Type-C\u2122 to USB Type-C\u2122 cable to the 5V/3A power supply Connect the USB Type-C\u2122 to USB Type-A cable betweenn your laptop and the USB Type-C\u2122 OTG port of the board Optionally connect the Ethernet cable between your Ethernet network and the Ethernet port of the board If the board power supply doesn't supply enough current (3A), the red LED indicates the issue following the rules below:","title":"Connection"},{"location":"getting_started/#execute-basic-commands","text":"This stage explains how to connect the Linux\u00ae terminal of your board to your host computer through the ST-LINK/V2-1. Then you will see how to execute basic commands with the Linux command line interface in order to be familiarized with the Linux console.","title":"Execute Basic Commands"},{"location":"getting_started/#the-serial-terminal","text":"The serial terminal allows to communicate with the board trough a UART serial interface. On Mac/Linux install minicom by running the following commands respectively $ sudo apt-get install minicom for Linux. $ brew install minicom for Mac. For Mac - Get the port on which the device is connected by running the following command $ ls /dev/tty* and in my case the port is /dev/tty.usbmodem142202 For Linux - Get the port on which the device is connected by running the following command $ ls /dev/ttyACM* and you should get the following output /dev/ttyACM0 Tip Run the command again by disconnecting the dev board from the host computer and notice which port is not listed. The missing port ID is your desired port ID. Connect minicom to the minicom -D /dev/ttyACM0 device by running the following command: for Mac minicom -D /dev/tty.usbmodem142202 and for Linux minicom -D /dev/ttyACM0 The output screen will be as follows: $ minicom -D /dev/ttyACM0 Welcome to minicom 2.7.1 OPTIONS: I18n Compiled on Nov 15 2018, 20:18:47. Port /dev/ttyACM0, 15:56:03 Press CTRL-A Z for help on special keys Press the reset button to reset the board. You should see boot log displayed in the minicom window in your host computer.","title":"The Serial Terminal"},{"location":"getting_started/#connect-using-ssh","text":"This feature works only if the ethernet cable is connected to the board. Determine the board's IP Address by running the following command in board using the serial terminal $ ip addr show eth0 The following code is displayed in your serial terminal. 3: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff inet xx.xx.xx.xx/xx brd xx.xx.xx.xx scope global dynamic eth0 valid_lft 159045sec preferred_lft 159045sec inet6 xxxx::xx:xx:xx:xx/64 scope link valid_lft forever preferred_lft forever inet xx.xx.xx.xx/xx is your board's IP address. On the host computer connect the terminal to the board using ssh $ ssh root@xx.xx.xx.xx root@stm32mp1:~#","title":"Connect using SSH"},{"location":"getting_started/#basic-commands","text":"Printing distribution specific information $ cat /etc/build ----------------------- Build Configuration: | ----------------------- BB_VERSION = 1.46.0 BUILD_SYS = x86_64-linux NATIVELSBSTRING = universal TARGET_SYS = arm-ostl-linux-gnueabi MACHINE = stm32mp1 DISTRO = openstlinux-weston DISTRO_VERSION = 3.1-openstlinux-5.10-dunfell-mp1-21-03-31 TUNE_FEATURES = arm vfp cortexa7 neon vfpv4 thumb callconvention-hard TARGET_FPU = hard MANIFESTVERSION = ostl-21-03-31-rc4-2-g7ef7d27 DISTRO_CODENAME = dunfell ACCEPT_EULA_stm32mp1 = 1 GCCVERSION = 9.% PREFERRED_PROVIDER_virtual/kernel = linux-stm32mp PREFERRED_VERSION_linux-stm32mp = ----------------------- Layer Revisions: | ----------------------- meta-python = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-oe = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-gnome = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-initramfs = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-multimedia = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-networking = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-webserver = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-filesystems = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-perl = default.xml:5bba79488b7d393d2258d6e917f7bf7b0d7c4073 meta-st-stm32mp = default.xml:2e80e33539a193c6a8add6131c4c760009c49cea meta-qt5 = default.xml:0d8eb956015acdea7e77cd6672d08dce18061510 meta-st-openstlinux = default.xml:673d7ee4572e3faadec3e43d5f0fa004465b78d9 meta = default.xml:72431ee8de5e3a53d259cebf420a7713ac9e1f14 Printing System Information $ uname -a Linux stm32mp1 5.10.10 #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 armv7l armv7l armv7l GNU/Linux Printing Linux Kernal and GCC versions $ cat /proc/version Linux version 5.10.10 (oe-user@oe-host) (arm-ostl-linux-gnueabi-gcc (GCC) 9.3.0, GNU ld (GNU Binutils) 2.34.0.20200220) #1 SMP PREEMPT Sat Jan 23 15:04:06 UTC 2021 Printing the amount of disk space available on all mounted file systems $ df -h Filesystem Size Used Avail Use% Mounted on devtmpfs 147M 0 147M 0% /dev /dev/mmcblk0p6 690M 424M 220M 66% / tmpfs 214M 64K 214M 1% /dev/shm tmpfs 214M 8.8M 205M 5% /run tmpfs 214M 0 214M 0% /sys/fs/cgroup tmpfs 214M 20K 214M 1% /tmp /dev/mmcblk0p4 58M 14M 40M 27% /boot /dev/mmcblk0p5 15M 6.8M 6.7M 51% /vendor tmpfs 214M 144K 214M 1% /var/volatile /dev/mmcblk0p7 28G 38M 26G 1% /usr/local tmpfs 43M 0 43M 0% /run/user/0","title":"Basic Commands"},{"location":"linux_knowledge/","text":"Linux Introduction Welcome to Introduction to Linux section! Here you\u2019ll find some general linux concepts which will come in handy when we dive deeper into working with STM32MP1 DK. Common Linux Commands The Shell The shell is basically a program that takes your commands from the keyboard and sends them to the operating system to perform. If you\u2019ve ever used a GUI, you\u2019ve probably seen programs such as \u201cTerminal\u201d or \u201cConsole\u201d these are just programs that launch a shell for you. Depending on the distribution your shell prompt might change, but for the most part it should adhere to the following format: username@hostname:current_directory deepak@STM32MP1:/home $ Notice the $ at the end of the prompt? Different shells will have different prompts, in our case: the $ is for a normal user the # is for a root user Let\u2019s start with a simple command, echo. The echo command just prints out the text arguments to the display. $ echo Hello World Hello World pwd (Print Working Directory) Everything in Linux is a file. Every file is organized in a hierarchical directory tree. The first directory in the filesystem is aptly named the root directory. The root directory has many folders and files which you can store more folders and files, etc. Here is an example of what the directory tree looks like: / |-- bin | |-- file1 | |-- file2 |-- etc | |-- file3 | -- directory1 | |-- file4 | -- file5 |-- home |-- var The location of these files and directories are referred to as paths. If you had a folder named home with a folder inside of it named etc and another folder in that folder called sys , that path would look like this: /home/etc/sys Navigation of the filesystem, much like real life is helpful if you know where you are and where you are going. To see where you are, you can use the pwd command, this command means \u201cprint working directory\u201d and it just shows you which directory you are in, note the path stems from the root directory. $pwd /home/root cd (Change Directory) Now that you know where you are, let\u2019s see if we can move around the filesystem a bit. There are two different ways to specify a path, with absolute and relative paths. Absolute path : This is the path from the root directory. The root is the head or parent directory. The root directory is commonly shown as a slash / . Every time your path starts with / it means you are starting from the root directory. For example, /home/deepak/Desktop . Relative path : This is the path from where you are currently in filesystem. If I was in location /home/deepak/Documents and wanted to get to a directory inside Documents called files , I don\u2019t have to specify the whole path from root like /home/deepak/Documents/files , I can just go to files/ instead. cd /home/root It can get pretty tiring navigating with absolute and relative paths all the time, luckily there are some shortcuts to help you out. . (current directory). This is the directory you are currently in. .. (parent directory). Takes you to the directory above your current. ~ (home directory). This directory defaults to your \u201chome directory\u201d. Such as /home/deepak. - (previous directory). This will take you to the previous directory you were just at. cd (home directory). This is another way to go to home directory. $ cd . $ cd .. $ cd ~ $ cd - ls (List Directories) Now that we know how to move around the system, how do we figure out what is available to us? The ls command will list directories and files in the current directory by default, however you can specify which path you want to list the directories of. $ ls bin dev home lost+found mnt root sbin tmp var boot etc lib media proc run sys usr vendor $ ls /home/deepak example_file_1 example_file_2 Also note that not all files in a directory will be visible. Filenames that start with . are hidden, you can view them however with the ls command and pass the -a flag to it (a for all). $ ls -a There is also one more useful ls flag, -l for long, this shows a detailed list of files in a long format. This will show you detailed information, starting from the left: file permissions , number of links , owner name , owner group , file size , timestamp of last modification , and file/directory name $ ls -l total 37 drwxr-xr-x 2 root root 5120 Mar 9 2018 bin drwxr-xr-x 18 root root 1024 Mar 15 2019 boot drwxr-xr-x 13 root root 13840 Apr 9 02:28 dev drwxr-xr-x 44 root root 4096 Mar 2 2019 etc drwxr-xr-x 3 root root 1024 Mar 9 2018 home drwxr-xr-x 12 root root 4096 Mar 9 2018 lib drwx------ 2 root root 12288 Mar 15 2019 lost+found drwxr-xr-x 2 root root 1024 Mar 9 2018 media drwxr-xr-x 2 root root 1024 Mar 9 2018 mnt dr-xr-xr-x 133 root root 0 Jan 1 1970 proc drwxr-xr-x 5 root root 1024 Apr 8 07:48 root drwxr-xr-x 13 root root 380 Apr 9 02:29 run drwxr-xr-x 3 root root 4096 Mar 9 2018 sbin dr-xr-xr-x 12 root root 0 Jan 1 2000 sys drwxrwxrwt 7 root root 180 Apr 9 09:43 tmp drwxr-xr-x 11 root root 1024 Mar 9 2018 usr drwxr-xr-x 9 root root 1024 Mar 2 2019 var drwxr-xr-x 4 root root 1024 Mar 15 2019 vendor Commands have things called flags (or arguments or options, whatever you want to call it) to add more functionality. You can add them both together. For example, -la . The order of the flags determines which order it goes in. You can also do ls -al and it would still work. Run ls with different flags and see the output you receive. ls -R : recursively list directory contents ls -r : reverse order while sorting ls -t : sort by modification time, newest first touch Touch allows you to the create new empty files. $ touch mysuperduperfile Touch is also used to change timestamps on existing files and directories. Give it a try, do an ls -l on a file and note the timestamp, then touch that file and it will update the timestamp. file We learned about touch but did you notice that the filename didn\u2019t conform to standard naming like you\u2019ve probably seen with other operating systems like Windows? Normally you would expect a file called banana.jpeg and expect a JPEG picture file. In Linux, filenames aren\u2019t required to represent the contents of the file. You can create a file called funny.gif that isn\u2019t actually a GIF. To find out what kind of file a file is, you can use the file command. It will show you a description of the file\u2019s contents. $ file Documents Documents: directory cat Let\u2019s learn how to read a file. A simple command to use is the cat command, short for concatenate, it not only displays file contents but it can combine multiple files and show you the output of them. $ cat dogfile birdfile Tip It\u2019s not great for viewing large files and it\u2019s only meant for short content. There are many other tools that we use to view larger text files that we\u2019ll discuss later. less If you are viewing text files larger than a simple output then you can use less command. The text is displayed in a paged manner, so you can navigate through a text file page by page. Go ahead and look at the contents of a file with less. Once you\u2019re in the less command, you can actually use other keyboard commands to navigate in the file. $ less /home/deepak/Documents/text1 Use the following command to navigate through less: q - Used to quit out of less and go back to your shell. Page up , Page down , Up and Down - Navigate using the arrow keys and page keys. g - Moves to beginning of the text file. G - Moves to the end of the text file. /sometexttosearch - You can search for specific text inside the text document. Prefacing the words you want to search with / h - If you need a little help about how to use less while you\u2019re in less, use help. history In your shell, there is a history of the commands that you previously entered, you can actually look through these commands. This is quite useful when you want to find and run a command you used previously without actually typing it again. $ history Want to run the same command you did before, just hit the up arrow. Want to run the previous command without typing it again? Use !! If you typed cat file1 and want to run it again, you can actually just go !! and it will run the last command. Another history shortcut is ctrl-R , this is the reverse search command, if you hit ctrl-R and you start typing parts of the command you want it will show you matches and you can just navigate through them by hitting the ctrl-R key again. Once you found the command you want to use again, just hit the Enter key. Tip If the terminal window gets cluttered, use the $ clear command to clear up your display. While we are talking about useful things, one of the most useful features in any command-line environment is tab completion. If you start typing the beginning of a command, file, directory, etc and hit the Tab key, it will autocomplete based on what it finds in the directory you are searching as long as you don\u2019t have any other files that start with those letters. For example if you were trying to run the command chrome, you can type chr and press Tab and it will autocomplete chrome. cp (Copy) Use copy command to copy files from one location to other location. $ cp mycoolfile /home/deepak/documents/cooldocs mycoolfile is the file you want to copy and /home/deepak/Documents/cooldocs is where you are copying the file to. Wildcard - A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches. You can use wildcards in every command for more flexibility. * the wildcard of wildcards, it's used to represent all single characters or any string. ? used to represent one character [] used to represent any character within the brackets $ cp *.jpg /home/deepak/Pictures This will copy all files with the .jpg extension in your current directory to the Pictures directory. Copying Directories A useful command is to use the -r flag, this will recursively copy the files and directories within a directory. $ cp -r Pumpkin/ /home/deepak/Documents One thing to note, if you copy a file over to a directory that has the same filename, the file will be overwritten with whatever you are copying over. Inorder to avoid that you can use the -i flag (interactive) to prompt you before overwriting a file. $ cp -i mycoolfile /home/deepak/Pictures mv (Move) Used for moving files and also renaming them. Quite similar to the cp command in terms of flags and functionality. Rename File You can rename files like this: $ mv oldfile newfile Or you can actually move a file to a different directory: $ mv file2 /home/deepak/Documents And move more than one file: $ mv file_1 file_2 /somedirectory Rename Directory You can rename directories as well: $ mv directory1 directory2 Like cp , if you mv a file or directory it will overwrite anything in the same directory. So you can use the -i flag to prompt you before overwriting anything. $ mv -i directory1 directory2 Create a Backup File Let\u2019s say you did want to mv a file to overwrite the previous one. You can also make a backup of that file and it will just rename the old version with a ~ $ mv -b directory1 directory2 mkdir (Make Directory) We might need some directories to store all the files we\u2019ve been working on. The mkdir command (Make Directory) is useful for that, it will create a directory if it doesn\u2019t exist. Multiple Directories You can even make multiple directories at the same time. $ mkdir books paintings Sub Directories You can also create subdirectories at the same time with the -p (parent flag) $ mkdir -p books/hemmingway/favorites rm (Remove) To remove files you can use the rm command. The rm (remove) command is used to delete files and directories. $ rm file1 Warning Take caution when using rm , you cannot undo once done. Be careful. Fortunately there are some safety measures put into place, so you can\u2019t just remove a bunch of important files. Write-protected files will prompt you for confirmation before deleting them. If a directory is write-protected it will also not be easily removed. Now if you don\u2019t care about any of that, you can absolutely remove a bunch of files. $ rm -f file1 -f or force option tells rm to remove all files, whether they are write protected or not, without prompting the user (as long as you have the appropriate permissions). $ rm -i file Adding the -i flag like many of the other commands, will give you a prompt on whether you want to actually remove the files or directories. $ rm -r directory You can\u2019t just rm a directory by default, you\u2019ll need to add the -r flag (recursive) to remove all the files and any subdirectories it may have. You can remove a directory with the rmdir command. $ rmdir directory find With all the files we have on the system it can get a little hectic trying to find a specific one. Well there\u2019s a command we can use for that, find $ find /home -name puppies.jpg With find you\u2019ll have to specify the directory you\u2019ll be searching it, what you\u2019re searching for, in this case we are trying to find a file by the name of puppies.jpg You can specify what type of file you are trying to find. $ find /home -type d -name MyFolder You can see that I set the type of file I\u2019m trying to find as d for directory and I\u2019m still searching by the name of MyFolder . One cool thing to note is that find doesn\u2019t stop at the directory you are searching, it will look inside any subdirectories that directory may have as well. help Linux has some great built-in tools to help you how to use a command or check what flags are available for a command. One tool, help , is a built-in bash command that provides help for other bash commands (echo, logout, pwd, etc). $ help echo This will give you a description and the options you can use when you want to run echo . For other executable programs, it\u2019s convention to have an option called --help or something similar. $ echo --help Not all developers who ship out executables will conform to this standard, but it\u2019s probably your best shot to find some help on a program. man You can see the manuals for a command with the man command. $ man ls Man pages are manuals that are by default built into most Linux operating systems. They provide documentation about commands and other aspects of the system. whatis If you are ever feeling doubtful about what a command does, you can use the whatis command. The whatis command provides a brief description of command line programs. $ whatis cat The description gets sourced from the manual page of each command. If you ran whatis cat , you\u2019d see there is a small blurb with a short description. alias Sometimes typing commands can get really repetitive, or if you need to type a long command many times, it\u2019s best to have an alias you can use for that. To create an alias for a command you simply specify an alias name and set it to the command. $ alias foobar='ls -la' Now instead of typing ls -la , you can type foobar and it will execute that command. Keep in mind that this command won't save your alias after reboot, so you'll need to add a permanent alias in: ~/.bashrc or similar files if you want to have it persist after reboot. You can remove aliases with the unalias command: $ unalias foobar exit To exit from the shell, you can use the exit command $ exit Or the logout command $ logout Or if you are working out of a terminal GUI, you can just close the terminal. Working with Text stdout (Standard Out) Use echo to print something on the screen. $ echo Hello World We know this prints out Hello World to the screen, but how? Processes use I/O streams to receive input and return output. By default the echo command takes the input (standard input or stdin) from the keyboard and returns the output (standard output or stdout) to the screen. So that's why when you type echo Hello World in your shell, you get Hello World on the screen. However, I/O redirection allows us to change this default behavior giving us greater file flexibility. > The > is a redirection operator that allows us the change where standard output goes. It allows us to send the output of echo Hello World to a file instead of the screen. If the file does not already exist it will create it for us. However, if it does exist it will overwrite it (you can add a shell flag to prevent this depending on what shell you are using). And that's basically how stdout redirection works! $ echo Hello World > peanuts.txt What just happened? Well check the directory where you ran that command and you should see a file called peanuts.txt, look inside that file and you should see the text Hello World. Lots of things just happened in one command so let's break it down. Warning If the file already exist it will overwrite it the file with the new file. You can always use the shell flag -i to warn you before overwriting. If you just want to append the test to the file then use >> instead of > $ echo Hello World >> peanuts.txt This will append Hello World to the end of the peanuts.txt file, if the file doesn't already exist it will create it for us like it did with the > redirector! stdin (Standard In) There are different standard input (stdin) streams. We know that we have stdin from devices like the keyboard, but we can use files, output from other processes and the terminal as well, let's see an example. Let's say we have a peanuts.txt file and it has the text Hello World in it. $ cat < peanuts.txt > banana.txt Just like we had > for stdout redirection, we can use < for stdin redirection. Normally in the cat command, you send a file to it and that file becomes the stdin, in this case, we redirected peanuts.txt to be our stdin. Then the output of cat peanuts.txt which would be Hello World gets redirected to another file called banana.txt, and if banana.txt file doesn't exist, it will be created. grep The grep command is quite possibly the most common text processing command you will use. It allows you to search files for characters that match a certain pattern. What if you wanted to know if a file existed in a certain directory or if you wanted to see if a string was found in a file? You certainly wouldn't dig through every line of text, you would use grep! Let's use our sample.txt file as an example: $ grep fox sample.txt You should see that grep found fox in the sample.txt file. You can also grep patterns that are case insensitive with the -i flag: $ grep -i somepattern somefile To get even more flexible with grep you can combine it with other commands with | $ env | grep -i User As you can see grep is pretty versatile. You can even use regular expressions in your pattern $ ls /somedir | grep '.txt$' Should return all files ending with .txt in somedir . Text Editors Vim and emacs are popular text editors that are installed by default on most Linux distributions and they both have their pros and cons. They are essentially coding, word document processing and basically all in one editors. Vim (Vi Improved) Vim stands for vi (Improved) just like its name it stands for an improved version of the vi text editor command. It's super lightweight, opening and editing a file with vim is quick and easy. It's also almost always available, if you booted up a random Linux distribution, chances are vim is installed by default. To fire up vim just type: vim Vim Search Patterns To search for an expression just type the / key and then your search result while you are in a vim session. Once you hit enter, you can press n to go forward or N to go backward in your search results. My pretty file is very pretty. /pretty will find the pretty words in the text file. The ? search command will search the text file backwards, so in the previous example, the last pretty would come up first. My pretty file is very pretty. ?pretty will find the pretty words in the text file. Vim Navigation Now you may notice, the mouse is nowhere of use here. To navigate a text document in vim, use the following keys: h or the left arrow - will move you left one character k or the up arrow - will move you up one line j or the down arrow - will move you down one line l or the right arrow - will move you right one character Vim Appending Text Now you may have noticed if you tried to type something you wouldn't be able to. That's because you are in command mode. This can get pretty confusing especially if you just want to open a file and enter text. The command mode is used for when you enter commands like h , j , k , l etc. To insert text you'll need to enter insert mode first. ` i - insert text before the cursor O - insert text on the previous line o - insert text on the next line a - append text after the cursor A - append text at the end of the line Notice how when you type any of these insertion modes, you'll see that vim has entered insert mode at the bottom of the shell. To exit insert mode and go back to command mode, just hit the Esc key. Vim Editing Now that we have a couple of lines written, let's edit it a bit more and remove some cruft. x - used to cut the selected text also used for deleting characters dd - used to delete the current line y - yank or copy whatever is selected yy - yank or copy the current line p - paste the copied text before the cursor Vim Saving and Exiting Now that you've done your editing it's time to actually save and quit out of vim: :w - writes or saves the file :q - quit out of vim :wq - write and then quit :q! - quit out of vim without saving the file ZZ - equivalent of :wq, but one character faster u - undo your last action Ctrl-r - redo your last action You may not think ZZ is necessary, but you'll eventually see that your fingers may tend to lean towards this rather than :wq . Permissions File Permissions Files have different permissions or file modes. Let's look at an example: $ ls -l Desktop/ drwxr-xr-x 2 pete penguins 4096 Dec 1 11:45 . There are four parts to a file's permissions. The first part is the filetype, which is denoted by the first character in the permissions, in our case since we are looking at a directory it shows d for the filetype. Most commonly you will see a - for a regular file. The next three parts of the file mode are the actual permissions. The permissions are grouped into 3 bits each. The first 3 bits are user permissions, then group permissions and then other permissions. I've added the pipe to make it easier to differentiate. d | rwx | r-x | r-x Each character represent a different permission: r: readable w: writable x: executable (basically an executable program) -: empty So in the above example, we see that the user pete has read, write and execute permissions on the file. The group penguins has read and execute permissions. And finally, the other users (everyone else) has read and execute permissions. Modifying Permissions Changing permissions can easily be done with the chmod command. First, pick which permission set you want to change, user, group or other. You can add or remove permissions with a + or - , let's look at some examples. Adding permission bit on a file $ chmod u+x myfile The above command reads like this: change permission on myfile by adding executable permission bit on the user set. So now the user has executable permission on this file! Removing permission bit on a file $ chmod u-x myfile Adding multiple permission bits on a file $ chmod ug+w There is another way to change permissions using numerical format. This method allows you to change permissions all at once. Instead of using r , w , or x to represent permissions, you'll use a numerical representation for a single permission set. So no need to specify the group with g or the user with u . The numerical representations are seen below: 4 : read permission 2 : write permission 1 : execute permission Let's look at an example: $ chmod 755 myfile Can you guess what permissions we are giving this file? Let's break this down, so now 755 covers the permissions for all sets. The first number 7 represents user permissions, the second number 5 represents group permissions and the last 5 represents other permissions. But, 7 and 5 weren't listed above, where are we getting these numbers? Remember we are combining all the permissions into one number now, so you'll have to get some math involved. 7 = 4 + 2 + 1 , so 7 is the user permissions and it has read , write and execute permissions 5 = 4 + 1 , the group has read and execute permissions 5 = 4 +1 , and all other users have read and execute permissions One thing to note: it's not a great idea to be changing permissions, you could potentially expose a sensitive file for everyone to modify, however many times you legitimately want to change permissions, just take precaution when using the chmod command. Packages Software Distribution Your system is comprised of many packages such as internet browsers, text editors, media players, etc. These packages are managed via package managers, which install and maintain the software on your system. Not all packages are installed through package managers though, you can commonly install packages directly from their source code, however the majority of the time you will use a package manager to install software. What are packages? You may know them as Chrome, Photoshop, etc and they are, but what they really are just lots and lots of files that have been compiled into one. The people (or sometimes a single person) that write this software are known as upstream providers, they compile their code and write up how to get it installed. These upstream providers work on getting out new software and update existing software. When they are ready to release it to the world, they send their package to package maintainers, who handle getting this piece of software in the hands of the users. These package maintainers review, manage and distribute this software in the form of packages. Package Repositories Repositories are just a central storage location for packages. There are tons of repositories that hold lots of packages and best of all they are all found on the internet. Your machine doesn't know where to look for these repositories unless you explicitly tell it where to look. For example, let's say I want WackyWidgets Software on my machine. Well WackyWidgets manages their own repositories for their widget packages, inside this repository are 10 packages, the CoolWidget package, the SuperWidget package, etc. WackyWidgets hosts this repository at a source link called: http://download.widgets/linux/deb/ Now instead of going to their website to download the package directly, you can tell your machine to find WackyWidgets software from the source link. Your distribution already comes with pre-approved sources to get packages from and this is how it installs all the base packages you see on your system. On a Debian system, this sources file is the /etc/apt/sources.list file. Your machine will know to look there and check for any source repositories you added. apt (Package Management) One of the most popular management systems is apt. Debian: $ apt install package_name Remove a package Debian: $ apt remove package_name Updating packages for a repository It's always best practice to update your package repositories so they are up to date before you install and update a package. Debian: apt update; apt upgrade Get information about an installed package Debian: apt show package_name Compile Source Code Often times you will encounter an obscure package that only comes in the form of pure source code. You'll need to use a few commands to get that source code package compiled and installed on your system. First thing is first, you'll need to have software to install the tools that will allow you to compile source code. $ sudo apt install build-essential Once you do that, extract the contents of the package file, most likely a .tar.gz file. $ tar -xzvf package.tar.gz Before you do anything, take a look at the README or INSTALL file inside the package. Sometimes there will be specific installation instructions. Depending on what compile method that the developer used, you'll have to use different commands, such as cmake or something else. However, most commonly you'll see basic make compilation, so we'll discuss that: Inside the package contents will be a configure script, this script checks for dependencies on your system and if you are missing anything, you'll see an error and you'll need to fix those dependencies. $ ./configure The ./ allows you to execute a script in the current directory. $ make Inside of the package contents, there is a file called Makefile that contains rules to building the software. When you run the make command, it looks at this file to build the software. $ sudo make install This command actually installs the package, it will copy the correct files to the correct locations on your computer. If you want to uninstall the package, use: $ sudo make uninstall Be wary when using make install , you may not realize how much is actually going on in the background. If you decide to remove this package, you may not actually remove everything because you didn't realize what was added to your system. Instead forget everything about make install that I just explained to you and use the checkinstall command . This command will make a .deb file for you that you can easily install and uninstall. $ sudo checkinstall This command will essentially make install and build a .deb package and install it. This makes it easier to remove the package later on.","title":"Some Linux Knowledge"},{"location":"linux_knowledge/#linux-introduction","text":"Welcome to Introduction to Linux section! Here you\u2019ll find some general linux concepts which will come in handy when we dive deeper into working with STM32MP1 DK.","title":"Linux Introduction"},{"location":"linux_knowledge/#common-linux-commands","text":"","title":"Common Linux Commands"},{"location":"linux_knowledge/#the-shell","text":"The shell is basically a program that takes your commands from the keyboard and sends them to the operating system to perform. If you\u2019ve ever used a GUI, you\u2019ve probably seen programs such as \u201cTerminal\u201d or \u201cConsole\u201d these are just programs that launch a shell for you. Depending on the distribution your shell prompt might change, but for the most part it should adhere to the following format: username@hostname:current_directory deepak@STM32MP1:/home $ Notice the $ at the end of the prompt? Different shells will have different prompts, in our case: the $ is for a normal user the # is for a root user Let\u2019s start with a simple command, echo. The echo command just prints out the text arguments to the display. $ echo Hello World Hello World","title":"The Shell"},{"location":"linux_knowledge/#pwd-print-working-directory","text":"Everything in Linux is a file. Every file is organized in a hierarchical directory tree. The first directory in the filesystem is aptly named the root directory. The root directory has many folders and files which you can store more folders and files, etc. Here is an example of what the directory tree looks like: / |-- bin | |-- file1 | |-- file2 |-- etc | |-- file3 | -- directory1 | |-- file4 | -- file5 |-- home |-- var The location of these files and directories are referred to as paths. If you had a folder named home with a folder inside of it named etc and another folder in that folder called sys , that path would look like this: /home/etc/sys Navigation of the filesystem, much like real life is helpful if you know where you are and where you are going. To see where you are, you can use the pwd command, this command means \u201cprint working directory\u201d and it just shows you which directory you are in, note the path stems from the root directory. $pwd /home/root","title":"pwd (Print Working Directory)"},{"location":"linux_knowledge/#cd-change-directory","text":"Now that you know where you are, let\u2019s see if we can move around the filesystem a bit. There are two different ways to specify a path, with absolute and relative paths. Absolute path : This is the path from the root directory. The root is the head or parent directory. The root directory is commonly shown as a slash / . Every time your path starts with / it means you are starting from the root directory. For example, /home/deepak/Desktop . Relative path : This is the path from where you are currently in filesystem. If I was in location /home/deepak/Documents and wanted to get to a directory inside Documents called files , I don\u2019t have to specify the whole path from root like /home/deepak/Documents/files , I can just go to files/ instead. cd /home/root It can get pretty tiring navigating with absolute and relative paths all the time, luckily there are some shortcuts to help you out. . (current directory). This is the directory you are currently in. .. (parent directory). Takes you to the directory above your current. ~ (home directory). This directory defaults to your \u201chome directory\u201d. Such as /home/deepak. - (previous directory). This will take you to the previous directory you were just at. cd (home directory). This is another way to go to home directory. $ cd . $ cd .. $ cd ~ $ cd -","title":"cd (Change Directory)"},{"location":"linux_knowledge/#ls-list-directories","text":"Now that we know how to move around the system, how do we figure out what is available to us? The ls command will list directories and files in the current directory by default, however you can specify which path you want to list the directories of. $ ls bin dev home lost+found mnt root sbin tmp var boot etc lib media proc run sys usr vendor $ ls /home/deepak example_file_1 example_file_2 Also note that not all files in a directory will be visible. Filenames that start with . are hidden, you can view them however with the ls command and pass the -a flag to it (a for all). $ ls -a There is also one more useful ls flag, -l for long, this shows a detailed list of files in a long format. This will show you detailed information, starting from the left: file permissions , number of links , owner name , owner group , file size , timestamp of last modification , and file/directory name $ ls -l total 37 drwxr-xr-x 2 root root 5120 Mar 9 2018 bin drwxr-xr-x 18 root root 1024 Mar 15 2019 boot drwxr-xr-x 13 root root 13840 Apr 9 02:28 dev drwxr-xr-x 44 root root 4096 Mar 2 2019 etc drwxr-xr-x 3 root root 1024 Mar 9 2018 home drwxr-xr-x 12 root root 4096 Mar 9 2018 lib drwx------ 2 root root 12288 Mar 15 2019 lost+found drwxr-xr-x 2 root root 1024 Mar 9 2018 media drwxr-xr-x 2 root root 1024 Mar 9 2018 mnt dr-xr-xr-x 133 root root 0 Jan 1 1970 proc drwxr-xr-x 5 root root 1024 Apr 8 07:48 root drwxr-xr-x 13 root root 380 Apr 9 02:29 run drwxr-xr-x 3 root root 4096 Mar 9 2018 sbin dr-xr-xr-x 12 root root 0 Jan 1 2000 sys drwxrwxrwt 7 root root 180 Apr 9 09:43 tmp drwxr-xr-x 11 root root 1024 Mar 9 2018 usr drwxr-xr-x 9 root root 1024 Mar 2 2019 var drwxr-xr-x 4 root root 1024 Mar 15 2019 vendor Commands have things called flags (or arguments or options, whatever you want to call it) to add more functionality. You can add them both together. For example, -la . The order of the flags determines which order it goes in. You can also do ls -al and it would still work. Run ls with different flags and see the output you receive. ls -R : recursively list directory contents ls -r : reverse order while sorting ls -t : sort by modification time, newest first","title":"ls (List Directories)"},{"location":"linux_knowledge/#touch","text":"Touch allows you to the create new empty files. $ touch mysuperduperfile Touch is also used to change timestamps on existing files and directories. Give it a try, do an ls -l on a file and note the timestamp, then touch that file and it will update the timestamp.","title":"touch"},{"location":"linux_knowledge/#file","text":"We learned about touch but did you notice that the filename didn\u2019t conform to standard naming like you\u2019ve probably seen with other operating systems like Windows? Normally you would expect a file called banana.jpeg and expect a JPEG picture file. In Linux, filenames aren\u2019t required to represent the contents of the file. You can create a file called funny.gif that isn\u2019t actually a GIF. To find out what kind of file a file is, you can use the file command. It will show you a description of the file\u2019s contents. $ file Documents Documents: directory","title":"file"},{"location":"linux_knowledge/#cat","text":"Let\u2019s learn how to read a file. A simple command to use is the cat command, short for concatenate, it not only displays file contents but it can combine multiple files and show you the output of them. $ cat dogfile birdfile Tip It\u2019s not great for viewing large files and it\u2019s only meant for short content. There are many other tools that we use to view larger text files that we\u2019ll discuss later.","title":"cat"},{"location":"linux_knowledge/#less","text":"If you are viewing text files larger than a simple output then you can use less command. The text is displayed in a paged manner, so you can navigate through a text file page by page. Go ahead and look at the contents of a file with less. Once you\u2019re in the less command, you can actually use other keyboard commands to navigate in the file. $ less /home/deepak/Documents/text1 Use the following command to navigate through less: q - Used to quit out of less and go back to your shell. Page up , Page down , Up and Down - Navigate using the arrow keys and page keys. g - Moves to beginning of the text file. G - Moves to the end of the text file. /sometexttosearch - You can search for specific text inside the text document. Prefacing the words you want to search with / h - If you need a little help about how to use less while you\u2019re in less, use help.","title":"less"},{"location":"linux_knowledge/#history","text":"In your shell, there is a history of the commands that you previously entered, you can actually look through these commands. This is quite useful when you want to find and run a command you used previously without actually typing it again. $ history Want to run the same command you did before, just hit the up arrow. Want to run the previous command without typing it again? Use !! If you typed cat file1 and want to run it again, you can actually just go !! and it will run the last command. Another history shortcut is ctrl-R , this is the reverse search command, if you hit ctrl-R and you start typing parts of the command you want it will show you matches and you can just navigate through them by hitting the ctrl-R key again. Once you found the command you want to use again, just hit the Enter key. Tip If the terminal window gets cluttered, use the $ clear command to clear up your display. While we are talking about useful things, one of the most useful features in any command-line environment is tab completion. If you start typing the beginning of a command, file, directory, etc and hit the Tab key, it will autocomplete based on what it finds in the directory you are searching as long as you don\u2019t have any other files that start with those letters. For example if you were trying to run the command chrome, you can type chr and press Tab and it will autocomplete chrome.","title":"history"},{"location":"linux_knowledge/#cp-copy","text":"Use copy command to copy files from one location to other location. $ cp mycoolfile /home/deepak/documents/cooldocs mycoolfile is the file you want to copy and /home/deepak/Documents/cooldocs is where you are copying the file to. Wildcard - A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches. You can use wildcards in every command for more flexibility. * the wildcard of wildcards, it's used to represent all single characters or any string. ? used to represent one character [] used to represent any character within the brackets $ cp *.jpg /home/deepak/Pictures This will copy all files with the .jpg extension in your current directory to the Pictures directory. Copying Directories A useful command is to use the -r flag, this will recursively copy the files and directories within a directory. $ cp -r Pumpkin/ /home/deepak/Documents One thing to note, if you copy a file over to a directory that has the same filename, the file will be overwritten with whatever you are copying over. Inorder to avoid that you can use the -i flag (interactive) to prompt you before overwriting a file. $ cp -i mycoolfile /home/deepak/Pictures","title":"cp (Copy)"},{"location":"linux_knowledge/#mv-move","text":"Used for moving files and also renaming them. Quite similar to the cp command in terms of flags and functionality. Rename File You can rename files like this: $ mv oldfile newfile Or you can actually move a file to a different directory: $ mv file2 /home/deepak/Documents And move more than one file: $ mv file_1 file_2 /somedirectory Rename Directory You can rename directories as well: $ mv directory1 directory2 Like cp , if you mv a file or directory it will overwrite anything in the same directory. So you can use the -i flag to prompt you before overwriting anything. $ mv -i directory1 directory2 Create a Backup File Let\u2019s say you did want to mv a file to overwrite the previous one. You can also make a backup of that file and it will just rename the old version with a ~ $ mv -b directory1 directory2","title":"mv (Move)"},{"location":"linux_knowledge/#mkdir-make-directory","text":"We might need some directories to store all the files we\u2019ve been working on. The mkdir command (Make Directory) is useful for that, it will create a directory if it doesn\u2019t exist. Multiple Directories You can even make multiple directories at the same time. $ mkdir books paintings Sub Directories You can also create subdirectories at the same time with the -p (parent flag) $ mkdir -p books/hemmingway/favorites","title":"mkdir (Make Directory)"},{"location":"linux_knowledge/#rm-remove","text":"To remove files you can use the rm command. The rm (remove) command is used to delete files and directories. $ rm file1 Warning Take caution when using rm , you cannot undo once done. Be careful. Fortunately there are some safety measures put into place, so you can\u2019t just remove a bunch of important files. Write-protected files will prompt you for confirmation before deleting them. If a directory is write-protected it will also not be easily removed. Now if you don\u2019t care about any of that, you can absolutely remove a bunch of files. $ rm -f file1 -f or force option tells rm to remove all files, whether they are write protected or not, without prompting the user (as long as you have the appropriate permissions). $ rm -i file Adding the -i flag like many of the other commands, will give you a prompt on whether you want to actually remove the files or directories. $ rm -r directory You can\u2019t just rm a directory by default, you\u2019ll need to add the -r flag (recursive) to remove all the files and any subdirectories it may have. You can remove a directory with the rmdir command. $ rmdir directory","title":"rm (Remove)"},{"location":"linux_knowledge/#find","text":"With all the files we have on the system it can get a little hectic trying to find a specific one. Well there\u2019s a command we can use for that, find $ find /home -name puppies.jpg With find you\u2019ll have to specify the directory you\u2019ll be searching it, what you\u2019re searching for, in this case we are trying to find a file by the name of puppies.jpg You can specify what type of file you are trying to find. $ find /home -type d -name MyFolder You can see that I set the type of file I\u2019m trying to find as d for directory and I\u2019m still searching by the name of MyFolder . One cool thing to note is that find doesn\u2019t stop at the directory you are searching, it will look inside any subdirectories that directory may have as well.","title":"find"},{"location":"linux_knowledge/#help","text":"Linux has some great built-in tools to help you how to use a command or check what flags are available for a command. One tool, help , is a built-in bash command that provides help for other bash commands (echo, logout, pwd, etc). $ help echo This will give you a description and the options you can use when you want to run echo . For other executable programs, it\u2019s convention to have an option called --help or something similar. $ echo --help Not all developers who ship out executables will conform to this standard, but it\u2019s probably your best shot to find some help on a program.","title":"help"},{"location":"linux_knowledge/#man","text":"You can see the manuals for a command with the man command. $ man ls Man pages are manuals that are by default built into most Linux operating systems. They provide documentation about commands and other aspects of the system.","title":"man"},{"location":"linux_knowledge/#whatis","text":"If you are ever feeling doubtful about what a command does, you can use the whatis command. The whatis command provides a brief description of command line programs. $ whatis cat The description gets sourced from the manual page of each command. If you ran whatis cat , you\u2019d see there is a small blurb with a short description.","title":"whatis"},{"location":"linux_knowledge/#alias","text":"Sometimes typing commands can get really repetitive, or if you need to type a long command many times, it\u2019s best to have an alias you can use for that. To create an alias for a command you simply specify an alias name and set it to the command. $ alias foobar='ls -la' Now instead of typing ls -la , you can type foobar and it will execute that command. Keep in mind that this command won't save your alias after reboot, so you'll need to add a permanent alias in: ~/.bashrc or similar files if you want to have it persist after reboot. You can remove aliases with the unalias command: $ unalias foobar","title":"alias"},{"location":"linux_knowledge/#exit","text":"To exit from the shell, you can use the exit command $ exit Or the logout command $ logout Or if you are working out of a terminal GUI, you can just close the terminal.","title":"exit"},{"location":"linux_knowledge/#working-with-text","text":"","title":"Working with Text"},{"location":"linux_knowledge/#stdout-standard-out","text":"Use echo to print something on the screen. $ echo Hello World We know this prints out Hello World to the screen, but how? Processes use I/O streams to receive input and return output. By default the echo command takes the input (standard input or stdin) from the keyboard and returns the output (standard output or stdout) to the screen. So that's why when you type echo Hello World in your shell, you get Hello World on the screen. However, I/O redirection allows us to change this default behavior giving us greater file flexibility. > The > is a redirection operator that allows us the change where standard output goes. It allows us to send the output of echo Hello World to a file instead of the screen. If the file does not already exist it will create it for us. However, if it does exist it will overwrite it (you can add a shell flag to prevent this depending on what shell you are using). And that's basically how stdout redirection works! $ echo Hello World > peanuts.txt What just happened? Well check the directory where you ran that command and you should see a file called peanuts.txt, look inside that file and you should see the text Hello World. Lots of things just happened in one command so let's break it down. Warning If the file already exist it will overwrite it the file with the new file. You can always use the shell flag -i to warn you before overwriting. If you just want to append the test to the file then use >> instead of > $ echo Hello World >> peanuts.txt This will append Hello World to the end of the peanuts.txt file, if the file doesn't already exist it will create it for us like it did with the > redirector!","title":"stdout (Standard Out)"},{"location":"linux_knowledge/#stdin-standard-in","text":"There are different standard input (stdin) streams. We know that we have stdin from devices like the keyboard, but we can use files, output from other processes and the terminal as well, let's see an example. Let's say we have a peanuts.txt file and it has the text Hello World in it. $ cat < peanuts.txt > banana.txt Just like we had > for stdout redirection, we can use < for stdin redirection. Normally in the cat command, you send a file to it and that file becomes the stdin, in this case, we redirected peanuts.txt to be our stdin. Then the output of cat peanuts.txt which would be Hello World gets redirected to another file called banana.txt, and if banana.txt file doesn't exist, it will be created.","title":"stdin (Standard In)"},{"location":"linux_knowledge/#grep","text":"The grep command is quite possibly the most common text processing command you will use. It allows you to search files for characters that match a certain pattern. What if you wanted to know if a file existed in a certain directory or if you wanted to see if a string was found in a file? You certainly wouldn't dig through every line of text, you would use grep! Let's use our sample.txt file as an example: $ grep fox sample.txt You should see that grep found fox in the sample.txt file. You can also grep patterns that are case insensitive with the -i flag: $ grep -i somepattern somefile To get even more flexible with grep you can combine it with other commands with | $ env | grep -i User As you can see grep is pretty versatile. You can even use regular expressions in your pattern $ ls /somedir | grep '.txt$' Should return all files ending with .txt in somedir .","title":"grep"},{"location":"linux_knowledge/#text-editors","text":"Vim and emacs are popular text editors that are installed by default on most Linux distributions and they both have their pros and cons. They are essentially coding, word document processing and basically all in one editors.","title":"Text Editors"},{"location":"linux_knowledge/#vim-vi-improved","text":"Vim stands for vi (Improved) just like its name it stands for an improved version of the vi text editor command. It's super lightweight, opening and editing a file with vim is quick and easy. It's also almost always available, if you booted up a random Linux distribution, chances are vim is installed by default. To fire up vim just type: vim","title":"Vim (Vi Improved)"},{"location":"linux_knowledge/#vim-search-patterns","text":"To search for an expression just type the / key and then your search result while you are in a vim session. Once you hit enter, you can press n to go forward or N to go backward in your search results. My pretty file is very pretty. /pretty will find the pretty words in the text file. The ? search command will search the text file backwards, so in the previous example, the last pretty would come up first. My pretty file is very pretty. ?pretty will find the pretty words in the text file.","title":"Vim Search Patterns"},{"location":"linux_knowledge/#vim-navigation","text":"Now you may notice, the mouse is nowhere of use here. To navigate a text document in vim, use the following keys: h or the left arrow - will move you left one character k or the up arrow - will move you up one line j or the down arrow - will move you down one line l or the right arrow - will move you right one character","title":"Vim Navigation"},{"location":"linux_knowledge/#vim-appending-text","text":"Now you may have noticed if you tried to type something you wouldn't be able to. That's because you are in command mode. This can get pretty confusing especially if you just want to open a file and enter text. The command mode is used for when you enter commands like h , j , k , l etc. To insert text you'll need to enter insert mode first. ` i - insert text before the cursor O - insert text on the previous line o - insert text on the next line a - append text after the cursor A - append text at the end of the line Notice how when you type any of these insertion modes, you'll see that vim has entered insert mode at the bottom of the shell. To exit insert mode and go back to command mode, just hit the Esc key.","title":"Vim Appending Text"},{"location":"linux_knowledge/#vim-editing","text":"Now that we have a couple of lines written, let's edit it a bit more and remove some cruft. x - used to cut the selected text also used for deleting characters dd - used to delete the current line y - yank or copy whatever is selected yy - yank or copy the current line p - paste the copied text before the cursor","title":"Vim Editing"},{"location":"linux_knowledge/#vim-saving-and-exiting","text":"Now that you've done your editing it's time to actually save and quit out of vim: :w - writes or saves the file :q - quit out of vim :wq - write and then quit :q! - quit out of vim without saving the file ZZ - equivalent of :wq, but one character faster u - undo your last action Ctrl-r - redo your last action You may not think ZZ is necessary, but you'll eventually see that your fingers may tend to lean towards this rather than :wq .","title":"Vim Saving and Exiting"},{"location":"linux_knowledge/#permissions","text":"","title":"Permissions"},{"location":"linux_knowledge/#file-permissions","text":"Files have different permissions or file modes. Let's look at an example: $ ls -l Desktop/ drwxr-xr-x 2 pete penguins 4096 Dec 1 11:45 . There are four parts to a file's permissions. The first part is the filetype, which is denoted by the first character in the permissions, in our case since we are looking at a directory it shows d for the filetype. Most commonly you will see a - for a regular file. The next three parts of the file mode are the actual permissions. The permissions are grouped into 3 bits each. The first 3 bits are user permissions, then group permissions and then other permissions. I've added the pipe to make it easier to differentiate. d | rwx | r-x | r-x Each character represent a different permission: r: readable w: writable x: executable (basically an executable program) -: empty So in the above example, we see that the user pete has read, write and execute permissions on the file. The group penguins has read and execute permissions. And finally, the other users (everyone else) has read and execute permissions.","title":"File Permissions"},{"location":"linux_knowledge/#modifying-permissions","text":"Changing permissions can easily be done with the chmod command. First, pick which permission set you want to change, user, group or other. You can add or remove permissions with a + or - , let's look at some examples. Adding permission bit on a file $ chmod u+x myfile The above command reads like this: change permission on myfile by adding executable permission bit on the user set. So now the user has executable permission on this file! Removing permission bit on a file $ chmod u-x myfile Adding multiple permission bits on a file $ chmod ug+w There is another way to change permissions using numerical format. This method allows you to change permissions all at once. Instead of using r , w , or x to represent permissions, you'll use a numerical representation for a single permission set. So no need to specify the group with g or the user with u . The numerical representations are seen below: 4 : read permission 2 : write permission 1 : execute permission Let's look at an example: $ chmod 755 myfile Can you guess what permissions we are giving this file? Let's break this down, so now 755 covers the permissions for all sets. The first number 7 represents user permissions, the second number 5 represents group permissions and the last 5 represents other permissions. But, 7 and 5 weren't listed above, where are we getting these numbers? Remember we are combining all the permissions into one number now, so you'll have to get some math involved. 7 = 4 + 2 + 1 , so 7 is the user permissions and it has read , write and execute permissions 5 = 4 + 1 , the group has read and execute permissions 5 = 4 +1 , and all other users have read and execute permissions One thing to note: it's not a great idea to be changing permissions, you could potentially expose a sensitive file for everyone to modify, however many times you legitimately want to change permissions, just take precaution when using the chmod command.","title":"Modifying Permissions"},{"location":"linux_knowledge/#packages","text":"","title":"Packages"},{"location":"linux_knowledge/#software-distribution","text":"Your system is comprised of many packages such as internet browsers, text editors, media players, etc. These packages are managed via package managers, which install and maintain the software on your system. Not all packages are installed through package managers though, you can commonly install packages directly from their source code, however the majority of the time you will use a package manager to install software. What are packages? You may know them as Chrome, Photoshop, etc and they are, but what they really are just lots and lots of files that have been compiled into one. The people (or sometimes a single person) that write this software are known as upstream providers, they compile their code and write up how to get it installed. These upstream providers work on getting out new software and update existing software. When they are ready to release it to the world, they send their package to package maintainers, who handle getting this piece of software in the hands of the users. These package maintainers review, manage and distribute this software in the form of packages.","title":"Software Distribution"},{"location":"linux_knowledge/#package-repositories","text":"Repositories are just a central storage location for packages. There are tons of repositories that hold lots of packages and best of all they are all found on the internet. Your machine doesn't know where to look for these repositories unless you explicitly tell it where to look. For example, let's say I want WackyWidgets Software on my machine. Well WackyWidgets manages their own repositories for their widget packages, inside this repository are 10 packages, the CoolWidget package, the SuperWidget package, etc. WackyWidgets hosts this repository at a source link called: http://download.widgets/linux/deb/ Now instead of going to their website to download the package directly, you can tell your machine to find WackyWidgets software from the source link. Your distribution already comes with pre-approved sources to get packages from and this is how it installs all the base packages you see on your system. On a Debian system, this sources file is the /etc/apt/sources.list file. Your machine will know to look there and check for any source repositories you added.","title":"Package Repositories"},{"location":"linux_knowledge/#apt-package-management","text":"One of the most popular management systems is apt. Debian: $ apt install package_name Remove a package Debian: $ apt remove package_name Updating packages for a repository It's always best practice to update your package repositories so they are up to date before you install and update a package. Debian: apt update; apt upgrade Get information about an installed package Debian: apt show package_name","title":"apt (Package Management)"},{"location":"linux_knowledge/#compile-source-code","text":"Often times you will encounter an obscure package that only comes in the form of pure source code. You'll need to use a few commands to get that source code package compiled and installed on your system. First thing is first, you'll need to have software to install the tools that will allow you to compile source code. $ sudo apt install build-essential Once you do that, extract the contents of the package file, most likely a .tar.gz file. $ tar -xzvf package.tar.gz Before you do anything, take a look at the README or INSTALL file inside the package. Sometimes there will be specific installation instructions. Depending on what compile method that the developer used, you'll have to use different commands, such as cmake or something else. However, most commonly you'll see basic make compilation, so we'll discuss that: Inside the package contents will be a configure script, this script checks for dependencies on your system and if you are missing anything, you'll see an error and you'll need to fix those dependencies. $ ./configure The ./ allows you to execute a script in the current directory. $ make Inside of the package contents, there is a file called Makefile that contains rules to building the software. When you run the make command, it looks at this file to build the software. $ sudo make install This command actually installs the package, it will copy the correct files to the correct locations on your computer. If you want to uninstall the package, use: $ sudo make uninstall Be wary when using make install , you may not realize how much is actually going on in the background. If you decide to remove this package, you may not actually remove everything because you didn't realize what was added to your system. Instead forget everything about make install that I just explained to you and use the checkinstall command . This command will make a .deb file for you that you can easily install and uninstall. $ sudo checkinstall This command will essentially make install and build a .deb package and install it. This makes it easier to remove the package later on.","title":"Compile Source Code"},{"location":"reference/","text":"External References Websites STM32MP157C-DK2 official website STM32MPU Wiki by ST STM32MP157C Chipset Docs Development Board: Data Brief (PDF) User Manual UM2534 (PDF) MPU: STM32MP157C DataSheet DS12505(PDF) Reference Manual RM0436 (PDF) Application Notes TO BE ADDED CAD Resources Board Manufacturing: Board Design Project Files 1.0 MB1407 Board Manufacturing Files 1.0 MB1407 Bill of Materials: BOM MB1407 Schematics: Schematic MB1407 (PDF) Tools and Softwares MCU and MPU Embedded Software STM32CubeMP1 Package for STM32MP1 series STM32MP1 OpenSTLinux Developer Package STM32MP1 OpenSTLinux Distribution Package STM32MP1 OpenSTLinux Starter Package Software Development Tools STM32CubeIDE System Work Bench for Linux STM32 Programmers Firmware upgrade STLINK USB Drivers for Windows","title":"External Reference"},{"location":"reference/#external-references","text":"","title":"External References"},{"location":"reference/#websites","text":"STM32MP157C-DK2 official website STM32MPU Wiki by ST STM32MP157C Chipset","title":"Websites"},{"location":"reference/#docs","text":"Development Board: Data Brief (PDF) User Manual UM2534 (PDF) MPU: STM32MP157C DataSheet DS12505(PDF) Reference Manual RM0436 (PDF) Application Notes TO BE ADDED","title":"Docs"},{"location":"reference/#cad-resources","text":"Board Manufacturing: Board Design Project Files 1.0 MB1407 Board Manufacturing Files 1.0 MB1407 Bill of Materials: BOM MB1407 Schematics: Schematic MB1407 (PDF)","title":"CAD Resources"},{"location":"reference/#tools-and-softwares","text":"MCU and MPU Embedded Software STM32CubeMP1 Package for STM32MP1 series STM32MP1 OpenSTLinux Developer Package STM32MP1 OpenSTLinux Distribution Package STM32MP1 OpenSTLinux Starter Package Software Development Tools STM32CubeIDE System Work Bench for Linux STM32 Programmers Firmware upgrade STLINK USB Drivers for Windows","title":"Tools and Softwares"},{"location":"stm32mp1_series/","text":"The STM32MP1 Microprocessor Series 10 Year Longitivity Commitment by ST The STM32MP1 series is available in 3 different lines which are pin-to-pin compatible: STM32MP157: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz, 3D GPU, DSI display interface and CAN FD STM32MP153: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz and CAN FD STM32MP151: Single Cortex-A7 core up to @ 800 MHz, Cortex-M4 core @ 209 MHz STM32MP1 Series Comparision Flexible architecture The single or dual Cortex-A7 cores are dedicated to open-source operating systems while the Cortex-M4 core is dedicated to real-time and low-power tasks. Dual Cortex\u00ae-A7 cores running at 800 MHz\u00df\u00df 32-Kbyte L1 Instruction cache 32-Kbyte L1 Data cache 256-Kbyte Level 2 cache Cortex\u00ae-M4 core running at 209 MHz\u00df a single-precision floating point unit (FPU) a full set of digital signal processor (DSP) instructions memory protection unit for enhanced application security","title":"STM32MP1 Microprocessor Series"},{"location":"stm32mp1_series/#the-stm32mp1-microprocessor-series","text":"","title":"The STM32MP1 Microprocessor Series"},{"location":"stm32mp1_series/#10-year-longitivity-commitment-by-st","text":"The STM32MP1 series is available in 3 different lines which are pin-to-pin compatible: STM32MP157: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz, 3D GPU, DSI display interface and CAN FD STM32MP153: Dual Cortex-A7 cores up to @ 800 MHz, Cortex-M4 core @ 209 MHz and CAN FD STM32MP151: Single Cortex-A7 core up to @ 800 MHz, Cortex-M4 core @ 209 MHz","title":"10 Year Longitivity Commitment by ST"},{"location":"stm32mp1_series/#stm32mp1-series-comparision","text":"","title":"STM32MP1 Series Comparision"},{"location":"stm32mp1_series/#flexible-architecture","text":"The single or dual Cortex-A7 cores are dedicated to open-source operating systems while the Cortex-M4 core is dedicated to real-time and low-power tasks. Dual Cortex\u00ae-A7 cores running at 800 MHz\u00df\u00df 32-Kbyte L1 Instruction cache 32-Kbyte L1 Data cache 256-Kbyte Level 2 cache Cortex\u00ae-M4 core running at 209 MHz\u00df a single-precision floating point unit (FPU) a full set of digital signal processor (DSP) instructions memory protection unit for enhanced application security","title":"Flexible architecture"}]}